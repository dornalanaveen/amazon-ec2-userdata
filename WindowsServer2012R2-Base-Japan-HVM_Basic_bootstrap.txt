<powershell>

# Set TimeCounter
$StartTime = Get-Date

#-------------------------------------------------------------------------------
Write-Output "#1-0 Execution Time taken[WorkingDirectorySettings]: $((Get-Date).Subtract($StartTime).Seconds) second(s)"  

# Make Directory
New-Item -ItemType Directory -Path "C:\EC2-Bootstrap"
Set-Location -Path "C:\EC2-Bootstrap"
$WorkingDirectoryPath = "C:\EC2-Bootstrap\"

# Start Logging
Start-Transcript -Append -Force -Path $WorkingDirectoryPath\bootstrap.log

Write-Output "#1-0 Execution Time taken[WorkingDirectorySettings]: $((Get-Date).Subtract($StartTime).Seconds) second(s)"  

#-------------------------------------------------------------------------------
Write-Output "#1-1 Execution Time taken[Initial parameters]: $((Get-Date).Subtract($StartTime).Seconds) second(s)"  

# Changing the execution policy
Write-Output "# Changing the execution policy"
Get-ExecutionPolicy
Set-ExecutionPolicy RemoteSigned -Scope Process -Force
Get-ExecutionPolicy

# Load Module (AWS Tools for Windows PowerShell)
Write-Output "# Load Module (AWS Tools for Windows PowerShell)"
Import-Module 'C:\Program Files (x86)\AWS Tools\PowerShell\AWSPowerShell\AWSPowerShell.psd1'
Get-Module -Name AWSPowerShell
Get-AWSPowerShellVersion -ListServices

# Get PowerShell Version
Write-Output "# Get PowerShell Version"
$PSVersionTable

# Get Windows Environment Variables
Write-Output "# Get Windows Environment Variables"
Get-ChildItem env:

# Get Instance MetaData
Set-Variable -Name AZ -Value (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/placement/availability-zone)
Set-Variable -Name Region -Value ($AZ.Substring(0, $AZ.Length -1))
Set-Variable -Name InstanceId -Value (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-id)
Set-Variable -Name InstanceType -Value (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/instance-type)
Set-Variable -Name PrivateIp -Value (Invoke-Restmethod -uri http://169.254.169.254/latest/meta-data/local-ipv4)

# Get Setting File
Set-Variable -Name SysprepSettingsFile -Value "C:\Program Files\Amazon\Ec2ConfigService\sysprep2008.xml"
Set-Variable -Name EC2SettingsFile -Value "C:\Program Files\Amazon\Ec2ConfigService\Settings\Config.xml"
Set-Variable -Name CWLogsSettingsFile -Value "C:\Program Files\Amazon\Ec2ConfigService\Settings\AWS.EC2.Windows.CloudWatch.json"

# Get System & User Variables
Write-Output "# Get System & User Variables"
Get-Variable | Export-Csv -Encoding default $WorkingDirectoryPath\bootstrap-variable.csv

# Test of administrative privileges
Set-Variable -Name CheckAdministrator -Value (([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))

if ($CheckAdministrator -eq $true){
    Write-Output "[Infomation] UserData scripts run with the privileges of the administrator"
} else {
    Write-Output "[Warning] UserData scripts run with the privileges of the non-administrator"
}

# Test Connecting to the Internet (Google Public DNS:8.8.8.8)
While (-Not (Test-Connection -ComputerName 8.8.8.8 -Count 1 -ErrorAction SilentlyContinue))
{
    Start-Sleep -Seconds 5
}


#-------------------------------------------------------------------------------
Write-Output "#1-2 Execution Time taken[SystemSettings]: $((Get-Date).Subtract($StartTime).Seconds) second(s)"  

# Setting Timezone
tzutil.exe /s "Tokyo Standard Time"


# Setting SystemLocale
Set-WinSystemLocale -SystemLocale ja-JP
Set-WinHomeLocation -GeoId 0x7A
Set-WinCultureFromLanguageListOptOut -OptOut $False


# Setting Japanese UI
Set-WinUILanguageOverride ja-JP


# Update PowerShell Helper
Update-Help -UICulture en-US -Force
Update-Help -UICulture ja-JP -Force


# Setting AWS Tools for Windows PowerShell (Region Setting)
Get-DefaultAWSRegion
Set-DefaultAWSRegion -Region $Region
Get-DefaultAWSRegion


# Enable EC2config EventLog Output
Write-Output "# Before EC2config Settings File"
Get-Content $EC2SettingsFile

$xml1 = [xml](Get-Content $EC2SettingsFile)
$xmlElement1 = $xml1.get_DocumentElement()
$xmlElementToModify1 = $xmlElement1.Plugins

foreach ($element in $xmlElementToModify1.Plugin)
{
    if ($element.name -eq "Ec2EventLog")
    {
        $element.State="Enabled"
    }
}
$xml1.Save($EC2SettingsFile)

Write-Output "# After EC2config Settings File"
Get-Content $EC2SettingsFile


# Change System PowerPlan (High Performance)

# A string of "high performance" was Base64 encoded in Japanese
$HighPowerBase64 = "6auY44OR44OV44Kp44O844Oe44Oz44K5"

# Conversion from base64 to byte sequence
$HighPowerByte = [System.Convert]::FromBase64String( $HighPowerBase64 )

# To convert a sequence of bytes into a string of UTF-8 encoding
$HighPowerString = [System.Text.Encoding]::UTF8.GetString( $HighPowerByte )

Write-Output "# Before Windows System Power Plan Information"
Get-WmiObject -Namespace root\cimv2\power -Class win32_PowerPlan | Select-Object ElementName, IsActive | Format-Table -AutoSize

if (Get-WmiObject -Namespace root\cimv2\power -Class win32_PowerPlan | Where-Object { $_.ElementName -eq $HighPowerString }) {
    Write-Output "Change System PowerPlan : $HighPowerString"
    $HighPowerObject = Get-WmiObject -Namespace root\cimv2\power -Class win32_PowerPlan | Where-Object { $_.ElementName -eq $HighPowerString }
    $HighPowerObject.Activate()
    Start-Sleep -Seconds 5
} elseif (Get-WmiObject -Namespace root\cimv2\power -Class win32_PowerPlan | Where-Object { $_.ElementName -eq "High performance" }) {
    Write-Output "Change System PowerPlan : High performance"
    (Get-WmiObject -Name root\cimv2\power -Class Win32_PowerPlan -Filter 'ElementName = "High performance"').Activate()
    Start-Sleep -Seconds 5
} else {
    Write-Output "Change System PowerPlan : No change"
}

Write-Output "# After Windows System Power Plan Information"
Get-WmiObject -Namespace root\cimv2\power -Class win32_PowerPlan | Select-Object ElementName, IsActive | Format-Table -AutoSize


# Disable IPv6 Binding
Get-NetAdapterBinding

if (Get-NetAdapter | Where-Object { $_.InterfaceDescription -eq "Intel(R) 82599 Virtual Function" }) {
    Write-Output "Disable-NetAdapterBinding(IPv6) : Intel(R) 82599 Virtual Function"
    Disable-NetAdapterBinding -InterfaceDescription "Intel(R) 82599 Virtual Function" -ComponentID ms_tcpip6
    Start-Sleep -Seconds 5
} elseif (Get-NetAdapter | Where-Object { $_.InterfaceDescription -eq "AWS PV Network Device #0" }) {
    Write-Output "Disable-NetAdapterBinding(IPv6) : AWS PV Network Device"
    Disable-NetAdapterBinding -InterfaceDescription "AWS PV Network Device #0" -ComponentID ms_tcpip6
    Start-Sleep -Seconds 5
} else {
    Write-Output "Disable-NetAdapterBinding(IPv6) : No Target Device"
}

Get-NetAdapterBinding


# Setting Windows Folder Option
# Set-Variable -Name CheckAdministrator -Value (([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))
Set-Variable -Name RegistryFolderOption -Value "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"
Set-Variable -Name CheckRegistryFolderOption -Value (Test-Path -Path $RegistryFolderOption)

if (($CheckAdministrator -eq $true) -and ($CheckRegistryFolderOption -eq $true)) {
    Write-Output "[Infomation] Modify the Folder Options Setting start"
    Write-Output "# Before Modify the Folder Options Registry"
    Get-ItemProperty -Path $RegistryFolderOption

    # [Put the check box] Show hidden files, folders, or drives
    Set-ItemProperty -Path $RegistryFolderOption -Name "Hidden" -PropertyType DWord -Value 0x00000001 -Force

    # [Uncheck the checkbox] Hide extensions for known file types
    Set-ItemProperty -Path $RegistryFolderOption -Name "HideFileExt" -PropertyType DWord -Value 0x00000000 -Force

    # [Put the check box] Restore previous folders windows
    Set-ItemProperty -Path $RegistryFolderOption -Name "PersistBrowsers" -PropertyType DWord -Value 0x00000000 -Force

    Write-Output "# After Modify the Folder Options Registry"
    Get-ItemProperty -Path $RegistryFolderOption
} elseif (($CheckAdministrator -eq $true) -and ($CheckRegistryFolderOption -eq $false)) {
    Write-Output "[Warning] No registry path of setting target is present"
} else {
    Write-Output "[Warning] UserData scripts run with the privileges of the non-administrator"
}


# Setting Hostname
Rename-Computer $InstanceId -Force




#-------------------------------------------------------------------------------
Write-Output "#9-0 Execution Time taken[Save Files]: $((Get-Date).Subtract($StartTime).Seconds) second(s)"  

# Save Logging Data
Copy-Item "C:\Program Files\Amazon\Ec2ConfigService\Scripts\UserScript.ps1" $WorkingDirectoryPath
Copy-Item "C:\Windows\TEMP\*.tmp" $WorkingDirectoryPath

# Save Configuration Files
Copy-Item $SysprepSettingsFile $WorkingDirectoryPath
Copy-Item $EC2SettingsFile $WorkingDirectoryPath
Copy-Item $CWLogsSettingsFile $WorkingDirectoryPath


#-------------------------------------------------------------------------------
Write-Output "#9-1 Execution Time taken[Logging]: $((Get-Date).Subtract($StartTime).Seconds) second(s)"  

# Get Command History
Get-History | ConvertTo-Csv | Out-File $WorkingDirectoryPath\bootstrap-command-list.csv
Get-History | ConvertTo-Json | Out-File $WorkingDirectoryPath\bootstrap-command-list.json


# Stop Logging
Stop-Transcript


#-------------------------------------------------------------------------------
Write-Output "#9-2 Execution Time taken[Reboot]: $((Get-Date).Subtract($StartTime).Seconds) second(s)"  
Restart-Computer -Force

</powershell>
<powershellArguments>-ExecutionPolicy Unrestricted -NoProfile -NonInteractive</powershellArguments> 
<runAsLocalSystem>true</runAsLocalSystem>
